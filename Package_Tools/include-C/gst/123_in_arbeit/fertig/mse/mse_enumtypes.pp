
unit mse_enumtypes;
interface

{
  Automatically converted by H2Pas 1.0.0 from mse_enumtypes.h
  The following command line parameters were used:
    -p
    -T
    -d
    -c
    -e
    mse_enumtypes.h
}

{ Pointers to basic pascal types, inserted by h2pas conversion program.}
Type
  PLongint  = ^Longint;
  PSmallInt = ^SmallInt;
  PByte     = ^Byte;
  PWord     = ^Word;
  PDWord    = ^DWord;
  PDouble   = ^Double;

{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}


{ This file is generated by glib-mkenums, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses.  }
(** unsupported pragma#pragma once*)
{$include <glib-object.h>}
{$include <gst/mse/mse-prelude.h>}
{ enumerations from "gstmediasource.h"  }

function gst_media_source_ready_state_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GST_TYPE_MEDIA_SOURCE_READY_STATE : longint; { return type might be wrong }

function gst_media_source_error_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GST_TYPE_MEDIA_SOURCE_ERROR : longint; { return type might be wrong }

function gst_media_source_eos_error_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GST_TYPE_MEDIA_SOURCE_EOS_ERROR : longint; { return type might be wrong }

{ enumerations from "gstmsesrc.h"  }
function gst_mse_src_ready_state_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GST_TYPE_MSE_SRC_READY_STATE : longint; { return type might be wrong }

{ enumerations from "gstsourcebuffer.h"  }
function gst_source_buffer_append_mode_get_type:TGType;cdecl;external;
{ was #define dname def_expr }
function GST_TYPE_SOURCE_BUFFER_APPEND_MODE : longint; { return type might be wrong }

{ Generated data ends here  }

implementation

{ was #define dname def_expr }
function GST_TYPE_MEDIA_SOURCE_READY_STATE : longint; { return type might be wrong }
  begin
    GST_TYPE_MEDIA_SOURCE_READY_STATE:=gst_media_source_ready_state_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_MEDIA_SOURCE_ERROR : longint; { return type might be wrong }
  begin
    GST_TYPE_MEDIA_SOURCE_ERROR:=gst_media_source_error_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_MEDIA_SOURCE_EOS_ERROR : longint; { return type might be wrong }
  begin
    GST_TYPE_MEDIA_SOURCE_EOS_ERROR:=gst_media_source_eos_error_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_MSE_SRC_READY_STATE : longint; { return type might be wrong }
  begin
    GST_TYPE_MSE_SRC_READY_STATE:=gst_mse_src_ready_state_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_SOURCE_BUFFER_APPEND_MODE : longint; { return type might be wrong }
  begin
    GST_TYPE_SOURCE_BUFFER_APPEND_MODE:=gst_source_buffer_append_mode_get_type;
  end;


end.
