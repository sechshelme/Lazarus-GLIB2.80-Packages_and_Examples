unit gstrtsp_enumtypes;

interface

uses
  glib280, gst124;

{$IFDEF FPC}
{$PACKRECORDS C}
{$ENDIF}


{ This file is generated by glib-mkenums, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses.  }
(** unsupported pragma#pragma once*)
{$include <glib-object.h>}
{$include <gst/rtsp/rtsp-prelude.h>}
{ enumerations from "gstrtspdefs.h"  }

function gst_rtsp_result_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_RESULT : longint; { return type might be wrong }

function gst_rtsp_event_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_EVENT : longint; { return type might be wrong }

function gst_rtsp_family_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_FAMILY : longint; { return type might be wrong }

function gst_rtsp_state_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_STATE : longint; { return type might be wrong }

function gst_rtsp_version_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_VERSION : longint; { return type might be wrong }

function gst_rtsp_method_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_METHOD : longint; { return type might be wrong }

function gst_rtsp_auth_method_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_AUTH_METHOD : longint; { return type might be wrong }

function gst_rtsp_header_field_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_HEADER_FIELD : longint; { return type might be wrong }

function gst_rtsp_status_code_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_STATUS_CODE : longint; { return type might be wrong }

{ enumerations from "gstrtspmessage.h"  }
function gst_rtsp_msg_type_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_MSG_TYPE : longint; { return type might be wrong }

{ enumerations from "gstrtsprange.h"  }
function gst_rtsp_range_unit_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_RANGE_UNIT : longint; { return type might be wrong }

function gst_rtsp_time_type_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_TIME_TYPE : longint; { return type might be wrong }

{ enumerations from "gstrtsptransport.h"  }
function gst_rtsp_trans_mode_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_TRANS_MODE : longint; { return type might be wrong }

function gst_rtsp_profile_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_PROFILE : longint; { return type might be wrong }

function gst_rtsp_lower_trans_get_type:TGType;cdecl;external libgstrtsp;
{ was #define dname def_expr }
function GST_TYPE_RTSP_LOWER_TRANS : longint; { return type might be wrong }

{ Generated data ends here  }

// === Konventiert am: 8-10-24 11:21:45 ===


implementation


{ was #define dname def_expr }
function GST_TYPE_RTSP_RESULT : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_RESULT:=gst_rtsp_result_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_EVENT : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_EVENT:=gst_rtsp_event_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_FAMILY : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_FAMILY:=gst_rtsp_family_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_STATE : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_STATE:=gst_rtsp_state_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_VERSION : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_VERSION:=gst_rtsp_version_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_METHOD : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_METHOD:=gst_rtsp_method_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_AUTH_METHOD : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_AUTH_METHOD:=gst_rtsp_auth_method_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_HEADER_FIELD : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_HEADER_FIELD:=gst_rtsp_header_field_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_STATUS_CODE : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_STATUS_CODE:=gst_rtsp_status_code_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_MSG_TYPE : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_MSG_TYPE:=gst_rtsp_msg_type_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_RANGE_UNIT : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_RANGE_UNIT:=gst_rtsp_range_unit_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_TIME_TYPE : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_TIME_TYPE:=gst_rtsp_time_type_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_TRANS_MODE : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_TRANS_MODE:=gst_rtsp_trans_mode_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_PROFILE : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_PROFILE:=gst_rtsp_profile_get_type;
  end;

{ was #define dname def_expr }
function GST_TYPE_RTSP_LOWER_TRANS : longint; { return type might be wrong }
  begin
    GST_TYPE_RTSP_LOWER_TRANS:=gst_rtsp_lower_trans_get_type;
  end;


end.
